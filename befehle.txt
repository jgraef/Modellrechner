{
"NOP":  ("",  "Macht überhaupt nichts"),
"LDAU": ("n", "AKKU := n"),
"LDAD": ("a", "AKKU := RAM[a]"),
"STAD": ("a", "RAM[a] := AKKU"),
"IN":   ("n", "AKKU := IN[n]"),
"OUT":  ("n", "OUT[n] := AKKU"),
"ADDU": ("n", "AKKU := AKKU + n"),
"ADDD": ("a", "AKKU := AKKU + RAM[a]"),
"SUBU": ("n", "AKKU := AKKU - n"),
"SUBD": ("a", "AKKU := AKKU - RAM[a]"),
"MULU": ("n", "AKKU := AKKU * n"),
"MULD": ("a", "AKKU := AKKU * RAM[a]"),
"DIVU": ("n", "AKKU := AKKU / n"),
"DIVD": ("a", "AKKU := AKKU / RAM[a]"),
"MODU": ("n", "AKKU := AKKU % n (Division mit Rest)"),
"MODD": ("a", "AKKU := AKKU % RAM[a] (Division mit Rest)"),
"INC":  ("",  "AKKU := AKKU + 1"),
"DEC":  ("",  "AKKU := AKKU - 1"),
"ORU":  ("n", "AKKU := AKKU | n (Bitweises Oder)"),
"ORD":  ("a", "AKKU := AKKU | RAM[a] (Bitweises Oder)"),
"ANDU": ("n", "AKKU := AKKU & n (Bitweises Und)"),
"ANDD": ("a", "AKKU := AKKU & RAM[a] (Bitweises Und)"),
"XORU": ("n", "AKKU := AKKU ^ n (Bitweises Exklusives Oder)"),
"XORD": ("a", "AKKU := AKKU ^ RAM[a] (Bitweises Exklusives  Oder)"),
"NOT":  ("",  "AKKU := ~AKKU (Bitweises Nicht)"),
"LSHU": ("n", "AKKU := AKKU << n (Bitweises Linksverschieben)"),
"LSHD": ("a", "AKKU := AKKU << RAM[a] (Bitweises Linksverschieben)"),
"RSHU": ("n", "AKKU := AKKU << n (Bitweises Rechtsverschieben)"),
"RSHD": ("a", "AKKU := AKKU << RAM[a] (Bitweises Rechtsverschieben)"),
"CMPU": ("n", "Vergleicht AKKU mit n"),
"CMPD": ("a", "Vergleicht AKKU mit RAM[a]"),
"JUM":  ("a", "Springt zu a"),
"JP":   ("a", "Springt zu a wenn AKKU > X (n oder RAM[a]) beim Vergleich war"),
"JNP":  ("a", "Springt zu a wenn AKKU <= X (n oder RAM[a]) beim Vergleich war"),
"JZ":   ("a", "Springt zu a wenn AKKU = X (n oder RAM[a]) beim Vergleich war"),
"JNZ":  ("a", "Springt zu a wenn AKKU <> X (n oder RAM[a]) beim Vergleich war"),
"JN":   ("a", "Springt zu a wenn AKKU < X (n oder RAM[a]) beim Vergleich war"),
"JNN":  ("a", "Springt zu a wenn AKKU >= X (n oder RAM[a]) beim Vergleich war"),
"STOP": ("",  "Stoppt Rechner (Endlosschleife)"),
"CAL":  ("a", "Springt zu a und legt Rücksprungadresse auf den Stapelspeicher"),
"RET":  ("",  "Nimmt Rücksprungadresse von Stapelspeicher und spring zu dieser"),
"NEWB": ("",  "Setzt neue Stapelbasis und legt Alte auf den Stapelspeicher"),
"OLDB": ("",  "Stellt alte Stapelbasis wieder her"),
"RES":  ("n", "Reserviert n Bytes auf dem Stapelspeicher"),
"RED":  ("n", "Reduziert Stapelspeicher um n Bytes"),
"PUSH": ("",  "Legt AKKU auf Stapelspeicher"),
"POP":  ("",  "Nimmt obersten Wert von Stapelspeicher und schreibt ihn in AKKU"),
"STL":  ("d",  "RAM[BP+d] := AKKU"),
"LDL":  ("d",  "AKKU := RAM[BP+d]"),
"ADL":  ("d",  "AKKU := AKKU + RAM[BP+d]"),
"SBL":  ("d",  "AKKU := AKKU - RAM[BP+d]"),
"STLI": ("d",  "RAM[RAM[BP+d]] := AKKU"),
"LDLI": ("d",  "AKKU := RAM[RAM[BP+d]]"),
"ADLI": ("d",  "AKKU := AKKU + RAM[RAM[BP+d]]"),
"SBLI": ("d",  "AKKU := AKKU - RAM[RAM[BP+d]]"),
}